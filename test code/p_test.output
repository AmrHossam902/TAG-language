Terminals unused in grammar

   UNKNOWN
   DECL_STMNT
   ASSI_STMNT
   DECL_ASSI_STMNT
   CONST_DECL_STMNT
   EMPTY_STMNT
   ASSI_LIST
   DECL_LIST
   SWBODY
   LIST
   NOT
   "="


Grammar

    0 $accept: list $end

    1 list: statement list
    2     | %empty

    3 expr: '(' expr ')'
    4     | expr '+' expr
    5     | expr '-' expr
    6     | expr '/' expr
    7     | expr '*' expr
    8     | '-' expr
    9     | expr AND expr
   10     | expr OR expr
   11     | expr XOR expr
   12     | expr EE expr
   13     | expr NE expr
   14     | expr LT expr
   15     | expr GT expr
   16     | expr LE expr
   17     | expr GE expr
   18     | '!' expr
   19     | BOOL_VAL
   20     | INT_VAL
   21     | DOUBLE_VAL
   22     | STRING_VAL
   23     | CHAR_VAL
   24     | ID

   25 assi_stmnt: ID '=' expr

   26 decl_stmnt: ID_TYPE assi_stmnt

   27 statement: ';'
   28          | assi_stmnt ';'
   29          | decl_stmnt ';'
   30          | CONST decl_stmnt ';'
   31          | ID_TYPE ID ';'
   32          | IF expr ':' '{' list '}'
   33          | IF expr ':' '{' list '}' ELSE '{' list '}'
   34          | WHILE expr ':' '{' list '}'
   35          | REPEAT '{' list '}' UNTILL expr ':'
   36          | FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | SWITCH '[' expr ']' '{' switch_body '}'
   38          | BREAK ';'

   39 assi_list: assi_stmnt assi_list
   40          | ',' assi_list
   41          | %empty

   42 decl_list: ID_TYPE assi_list

   43 switch_body: case_block switch_body
   44            | %empty

   45 case_block: CASE '[' expr ']' list
   46           | DEFAULT list


Terminals, with rules where they appear

$end (0) 0
'!' (33) 18
'(' (40) 3 36
')' (41) 3 36
'*' (42) 7
'+' (43) 4
',' (44) 40
'-' (45) 5 8
'/' (47) 6
':' (58) 32 33 34 35
';' (59) 27 28 29 30 31 36 38
'=' (61) 25
'[' (91) 37 45
']' (93) 37 45
'{' (123) 32 33 34 35 36 37
'}' (125) 32 33 34 35 36 37
error (256)
INT_VAL (258) 20
DOUBLE_VAL (259) 21
BOOL_VAL (260) 19
ID (261) 24 25 31
ID_TYPE (262) 26 31 42
STRING_VAL (263) 22
CHAR_VAL (264) 23
UNKNOWN (265)
CONST (266) 30
IF (267) 32 33
ELSE (268) 33
WHILE (269) 34
FOR (270) 36
REPEAT (271) 35
UNTILL (272) 35
SWITCH (273) 37
CASE (274) 45
DEFAULT (275) 46
BREAK (276) 38
AND (277) 9
OR (278) 10
XOR (279) 11
DECL_STMNT (280)
ASSI_STMNT (281)
DECL_ASSI_STMNT (282)
CONST_DECL_STMNT (283)
EMPTY_STMNT (284)
ASSI_LIST (285)
DECL_LIST (286)
SWBODY (287)
LIST (288)
NOT (289)
EE (290) 12
NE (291) 13
LT (292) 14
GT (293) 15
LE (294) 16
GE (295) 17
UMINUS (296)
"=" (297)


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
list (59)
    on left: 1 2, on right: 0 1 32 33 34 35 36 45 46
expr (60)
    on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24, on right: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 25 32 33
    34 35 36 37 45
assi_stmnt (61)
    on left: 25, on right: 26 28 39
decl_stmnt (62)
    on left: 26, on right: 29 30
statement (63)
    on left: 27 28 29 30 31 32 33 34 35 36 37 38, on right: 1
assi_list (64)
    on left: 39 40 41, on right: 36 39 40 42
decl_list (65)
    on left: 42, on right: 36
switch_body (66)
    on left: 43 44, on right: 37 43
case_block (67)
    on left: 45 46, on right: 43


State 0

    0 $accept: . list $end
    1 list: . statement list
    2     | . %empty  [$end]
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   34          | . WHILE expr ':' '{' list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 11
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 1

   25 assi_stmnt: ID . '=' expr

    '='  shift, and go to state 15


State 2

   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: ID_TYPE . assi_stmnt
   31 statement: ID_TYPE . ID ';'

    ID  shift, and go to state 16

    assi_stmnt  go to state 17


State 3

   26 decl_stmnt: . ID_TYPE assi_stmnt
   30 statement: CONST . decl_stmnt ';'

    ID_TYPE  shift, and go to state 18

    decl_stmnt  go to state 19


State 4

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID
   32 statement: IF . expr ':' '{' list '}'
   33          | IF . expr ':' '{' list '}' ELSE '{' list '}'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 29


State 5

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID
   34 statement: WHILE . expr ':' '{' list '}'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 30


State 6

   36 statement: FOR . '(' decl_list ';' expr ';' assi_list ')' '{' list '}'

    '('  shift, and go to state 31


State 7

   35 statement: REPEAT . '{' list '}' UNTILL expr ':'

    '{'  shift, and go to state 32


State 8

   37 statement: SWITCH . '[' expr ']' '{' switch_body '}'

    '['  shift, and go to state 33


State 9

   38 statement: BREAK . ';'

    ';'  shift, and go to state 34


State 10

   27 statement: ';' .

    $default  reduce using rule 27 (statement)


State 11

    0 $accept: list . $end

    $end  shift, and go to state 35


State 12

   28 statement: assi_stmnt . ';'

    ';'  shift, and go to state 36


State 13

   29 statement: decl_stmnt . ';'

    ';'  shift, and go to state 37


State 14

    1 list: . statement list
    1     | statement . list
    2     | . %empty  [$end, CASE, DEFAULT, '}']
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   34          | . WHILE expr ':' '{' list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 38
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 15

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID
   25 assi_stmnt: ID '=' . expr

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 39


State 16

   25 assi_stmnt: ID . '=' expr
   31 statement: ID_TYPE ID . ';'

    '='  shift, and go to state 15
    ';'  shift, and go to state 40


State 17

   26 decl_stmnt: ID_TYPE assi_stmnt .

    $default  reduce using rule 26 (decl_stmnt)


State 18

   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: ID_TYPE . assi_stmnt

    ID  shift, and go to state 1

    assi_stmnt  go to state 17


State 19

   30 statement: CONST decl_stmnt . ';'

    ';'  shift, and go to state 41


State 20

   20 expr: INT_VAL .

    $default  reduce using rule 20 (expr)


State 21

   21 expr: DOUBLE_VAL .

    $default  reduce using rule 21 (expr)


State 22

   19 expr: BOOL_VAL .

    $default  reduce using rule 19 (expr)


State 23

   24 expr: ID .

    $default  reduce using rule 24 (expr)


State 24

   22 expr: STRING_VAL .

    $default  reduce using rule 22 (expr)


State 25

   23 expr: CHAR_VAL .

    $default  reduce using rule 23 (expr)


State 26

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    8     | '-' . expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 42


State 27

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   18     | '!' . expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 43


State 28

    3 expr: . '(' expr ')'
    3     | '(' . expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 44


State 29

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   32 statement: IF expr . ':' '{' list '}'
   33          | IF expr . ':' '{' list '}' ELSE '{' list '}'

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    EE   shift, and go to state 48
    NE   shift, and go to state 49
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57
    ':'  shift, and go to state 58


State 30

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   34 statement: WHILE expr . ':' '{' list '}'

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    EE   shift, and go to state 48
    NE   shift, and go to state 49
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57
    ':'  shift, and go to state 59


State 31

   36 statement: FOR '(' . decl_list ';' expr ';' assi_list ')' '{' list '}'
   42 decl_list: . ID_TYPE assi_list

    ID_TYPE  shift, and go to state 60

    decl_list  go to state 61


State 32

    1 list: . statement list
    2     | . %empty  ['}']
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   34          | . WHILE expr ':' '{' list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   35          | REPEAT '{' . list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 62
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 33

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID
   37 statement: SWITCH '[' . expr ']' '{' switch_body '}'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 63


State 34

   38 statement: BREAK ';' .

    $default  reduce using rule 38 (statement)


State 35

    0 $accept: list $end .

    $default  accept


State 36

   28 statement: assi_stmnt ';' .

    $default  reduce using rule 28 (statement)


State 37

   29 statement: decl_stmnt ';' .

    $default  reduce using rule 29 (statement)


State 38

    1 list: statement list .

    $default  reduce using rule 1 (list)


State 39

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   25 assi_stmnt: ID '=' expr .  [ID, ')', ';', ',']

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    EE   shift, and go to state 48
    NE   shift, and go to state 49
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 25 (assi_stmnt)


State 40

   31 statement: ID_TYPE ID ';' .

    $default  reduce using rule 31 (statement)


State 41

   30 statement: CONST decl_stmnt ';' .

    $default  reduce using rule 30 (statement)


State 42

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    8     | '-' expr .  [ID, AND, OR, XOR, EE, NE, LT, GT, LE, GE, '+', '-', '/', '*', ')', ';', ':', ']', ',']
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    $default  reduce using rule 8 (expr)

    Conflict between rule 8 and token AND resolved as reduce (AND < UMINUS).
    Conflict between rule 8 and token OR resolved as reduce (OR < UMINUS).
    Conflict between rule 8 and token XOR resolved as reduce (XOR < UMINUS).
    Conflict between rule 8 and token EE resolved as reduce (EE < UMINUS).
    Conflict between rule 8 and token NE resolved as reduce (NE < UMINUS).
    Conflict between rule 8 and token LT resolved as reduce (LT < UMINUS).
    Conflict between rule 8 and token GT resolved as reduce (GT < UMINUS).
    Conflict between rule 8 and token LE resolved as reduce (LE < UMINUS).
    Conflict between rule 8 and token GE resolved as reduce (GE < UMINUS).
    Conflict between rule 8 and token '+' resolved as reduce ('+' < UMINUS).
    Conflict between rule 8 and token '-' resolved as reduce ('-' < UMINUS).
    Conflict between rule 8 and token '/' resolved as reduce ('/' < UMINUS).
    Conflict between rule 8 and token '*' resolved as reduce ('*' < UMINUS).


State 43

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   18     | '!' expr .  [ID, AND, OR, XOR, EE, NE, LT, GT, LE, GE, '+', '-', '/', '*', ')', ';', ':', ']', ',']

    $default  reduce using rule 18 (expr)

    Conflict between rule 18 and token AND resolved as reduce (AND < UMINUS).
    Conflict between rule 18 and token OR resolved as reduce (OR < UMINUS).
    Conflict between rule 18 and token XOR resolved as reduce (XOR < UMINUS).
    Conflict between rule 18 and token EE resolved as reduce (EE < UMINUS).
    Conflict between rule 18 and token NE resolved as reduce (NE < UMINUS).
    Conflict between rule 18 and token LT resolved as reduce (LT < UMINUS).
    Conflict between rule 18 and token GT resolved as reduce (GT < UMINUS).
    Conflict between rule 18 and token LE resolved as reduce (LE < UMINUS).
    Conflict between rule 18 and token GE resolved as reduce (GE < UMINUS).
    Conflict between rule 18 and token '+' resolved as reduce ('+' < UMINUS).
    Conflict between rule 18 and token '-' resolved as reduce ('-' < UMINUS).
    Conflict between rule 18 and token '/' resolved as reduce ('/' < UMINUS).
    Conflict between rule 18 and token '*' resolved as reduce ('*' < UMINUS).


State 44

    3 expr: '(' expr . ')'
    4     | expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    EE   shift, and go to state 48
    NE   shift, and go to state 49
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57
    ')'  shift, and go to state 64


State 45

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
    9     | expr AND . expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 65


State 46

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   10     | expr OR . expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 66


State 47

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   11     | expr XOR . expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 67


State 48

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   12     | expr EE . expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 68


State 49

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   13     | expr NE . expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 69


State 50

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   14     | expr LT . expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 70


State 51

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   15     | expr GT . expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 71


State 52

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   16     | expr LE . expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 72


State 53

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   17     | expr GE . expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 73


State 54

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    4     | expr '+' . expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 74


State 55

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    5     | expr '-' . expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 75


State 56

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    6     | expr '/' . expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 76


State 57

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    7     | expr '*' . expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 77


State 58

   32 statement: IF expr ':' . '{' list '}'
   33          | IF expr ':' . '{' list '}' ELSE '{' list '}'

    '{'  shift, and go to state 78


State 59

   34 statement: WHILE expr ':' . '{' list '}'

    '{'  shift, and go to state 79


State 60

   25 assi_stmnt: . ID '=' expr
   39 assi_list: . assi_stmnt assi_list
   40          | . ',' assi_list
   41          | . %empty  [';']
   42 decl_list: ID_TYPE . assi_list

    ID   shift, and go to state 1
    ','  shift, and go to state 80

    $default  reduce using rule 41 (assi_list)

    assi_stmnt  go to state 81
    assi_list   go to state 82


State 61

   36 statement: FOR '(' decl_list . ';' expr ';' assi_list ')' '{' list '}'

    ';'  shift, and go to state 83


State 62

   35 statement: REPEAT '{' list . '}' UNTILL expr ':'

    '}'  shift, and go to state 84


State 63

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   37 statement: SWITCH '[' expr . ']' '{' switch_body '}'

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    EE   shift, and go to state 48
    NE   shift, and go to state 49
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57
    ']'  shift, and go to state 85


State 64

    3 expr: '(' expr ')' .

    $default  reduce using rule 3 (expr)


State 65

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
    9     | expr AND expr .  [ID, AND, OR, EE, NE, LT, GT, LE, GE, ')', ';', ':', ']', ',']
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    XOR  shift, and go to state 47
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 9 (expr)

    Conflict between rule 9 and token AND resolved as reduce (%left AND).
    Conflict between rule 9 and token OR resolved as reduce (OR < AND).
    Conflict between rule 9 and token XOR resolved as shift (AND < XOR).
    Conflict between rule 9 and token EE resolved as reduce (EE < AND).
    Conflict between rule 9 and token NE resolved as reduce (NE < AND).
    Conflict between rule 9 and token LT resolved as reduce (LT < AND).
    Conflict between rule 9 and token GT resolved as reduce (GT < AND).
    Conflict between rule 9 and token LE resolved as reduce (LE < AND).
    Conflict between rule 9 and token GE resolved as reduce (GE < AND).
    Conflict between rule 9 and token '+' resolved as shift (AND < '+').
    Conflict between rule 9 and token '-' resolved as shift (AND < '-').
    Conflict between rule 9 and token '/' resolved as shift (AND < '/').
    Conflict between rule 9 and token '*' resolved as shift (AND < '*').


State 66

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   10     | expr OR expr .  [ID, OR, EE, NE, LT, GT, LE, GE, ')', ';', ':', ']', ',']
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    AND  shift, and go to state 45
    XOR  shift, and go to state 47
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 10 (expr)

    Conflict between rule 10 and token AND resolved as shift (OR < AND).
    Conflict between rule 10 and token OR resolved as reduce (%left OR).
    Conflict between rule 10 and token XOR resolved as shift (OR < XOR).
    Conflict between rule 10 and token EE resolved as reduce (EE < OR).
    Conflict between rule 10 and token NE resolved as reduce (NE < OR).
    Conflict between rule 10 and token LT resolved as reduce (LT < OR).
    Conflict between rule 10 and token GT resolved as reduce (GT < OR).
    Conflict between rule 10 and token LE resolved as reduce (LE < OR).
    Conflict between rule 10 and token GE resolved as reduce (GE < OR).
    Conflict between rule 10 and token '+' resolved as shift (OR < '+').
    Conflict between rule 10 and token '-' resolved as shift (OR < '-').
    Conflict between rule 10 and token '/' resolved as shift (OR < '/').
    Conflict between rule 10 and token '*' resolved as shift (OR < '*').


State 67

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   11     | expr XOR expr .  [ID, AND, OR, XOR, EE, NE, LT, GT, LE, GE, ')', ';', ':', ']', ',']
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 11 (expr)

    Conflict between rule 11 and token AND resolved as reduce (AND < XOR).
    Conflict between rule 11 and token OR resolved as reduce (OR < XOR).
    Conflict between rule 11 and token XOR resolved as reduce (%left XOR).
    Conflict between rule 11 and token EE resolved as reduce (EE < XOR).
    Conflict between rule 11 and token NE resolved as reduce (NE < XOR).
    Conflict between rule 11 and token LT resolved as reduce (LT < XOR).
    Conflict between rule 11 and token GT resolved as reduce (GT < XOR).
    Conflict between rule 11 and token LE resolved as reduce (LE < XOR).
    Conflict between rule 11 and token GE resolved as reduce (GE < XOR).
    Conflict between rule 11 and token '+' resolved as shift (XOR < '+').
    Conflict between rule 11 and token '-' resolved as shift (XOR < '-').
    Conflict between rule 11 and token '/' resolved as shift (XOR < '/').
    Conflict between rule 11 and token '*' resolved as shift (XOR < '*').


State 68

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   12     | expr EE expr .  [ID, EE, NE, ')', ';', ':', ']', ',']
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 12 (expr)

    Conflict between rule 12 and token AND resolved as shift (EE < AND).
    Conflict between rule 12 and token OR resolved as shift (EE < OR).
    Conflict between rule 12 and token XOR resolved as shift (EE < XOR).
    Conflict between rule 12 and token EE resolved as reduce (%left EE).
    Conflict between rule 12 and token NE resolved as reduce (%left NE).
    Conflict between rule 12 and token LT resolved as shift (EE < LT).
    Conflict between rule 12 and token GT resolved as shift (EE < GT).
    Conflict between rule 12 and token LE resolved as shift (EE < LE).
    Conflict between rule 12 and token GE resolved as shift (EE < GE).
    Conflict between rule 12 and token '+' resolved as shift (EE < '+').
    Conflict between rule 12 and token '-' resolved as shift (EE < '-').
    Conflict between rule 12 and token '/' resolved as shift (EE < '/').
    Conflict between rule 12 and token '*' resolved as shift (EE < '*').


State 69

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   13     | expr NE expr .  [ID, EE, NE, ')', ';', ':', ']', ',']
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 13 (expr)

    Conflict between rule 13 and token AND resolved as shift (NE < AND).
    Conflict between rule 13 and token OR resolved as shift (NE < OR).
    Conflict between rule 13 and token XOR resolved as shift (NE < XOR).
    Conflict between rule 13 and token EE resolved as reduce (%left EE).
    Conflict between rule 13 and token NE resolved as reduce (%left NE).
    Conflict between rule 13 and token LT resolved as shift (NE < LT).
    Conflict between rule 13 and token GT resolved as shift (NE < GT).
    Conflict between rule 13 and token LE resolved as shift (NE < LE).
    Conflict between rule 13 and token GE resolved as shift (NE < GE).
    Conflict between rule 13 and token '+' resolved as shift (NE < '+').
    Conflict between rule 13 and token '-' resolved as shift (NE < '-').
    Conflict between rule 13 and token '/' resolved as shift (NE < '/').
    Conflict between rule 13 and token '*' resolved as shift (NE < '*').


State 70

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   14     | expr LT expr .  [ID, EE, NE, LT, GT, LE, GE, ')', ';', ':', ']', ',']
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 14 (expr)

    Conflict between rule 14 and token AND resolved as shift (LT < AND).
    Conflict between rule 14 and token OR resolved as shift (LT < OR).
    Conflict between rule 14 and token XOR resolved as shift (LT < XOR).
    Conflict between rule 14 and token EE resolved as reduce (EE < LT).
    Conflict between rule 14 and token NE resolved as reduce (NE < LT).
    Conflict between rule 14 and token LT resolved as reduce (%left LT).
    Conflict between rule 14 and token GT resolved as reduce (%left GT).
    Conflict between rule 14 and token LE resolved as reduce (%left LE).
    Conflict between rule 14 and token GE resolved as reduce (%left GE).
    Conflict between rule 14 and token '+' resolved as shift (LT < '+').
    Conflict between rule 14 and token '-' resolved as shift (LT < '-').
    Conflict between rule 14 and token '/' resolved as shift (LT < '/').
    Conflict between rule 14 and token '*' resolved as shift (LT < '*').


State 71

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   15     | expr GT expr .  [ID, EE, NE, LT, GT, LE, GE, ')', ';', ':', ']', ',']
   16     | expr . LE expr
   17     | expr . GE expr

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 15 (expr)

    Conflict between rule 15 and token AND resolved as shift (GT < AND).
    Conflict between rule 15 and token OR resolved as shift (GT < OR).
    Conflict between rule 15 and token XOR resolved as shift (GT < XOR).
    Conflict between rule 15 and token EE resolved as reduce (EE < GT).
    Conflict between rule 15 and token NE resolved as reduce (NE < GT).
    Conflict between rule 15 and token LT resolved as reduce (%left LT).
    Conflict between rule 15 and token GT resolved as reduce (%left GT).
    Conflict between rule 15 and token LE resolved as reduce (%left LE).
    Conflict between rule 15 and token GE resolved as reduce (%left GE).
    Conflict between rule 15 and token '+' resolved as shift (GT < '+').
    Conflict between rule 15 and token '-' resolved as shift (GT < '-').
    Conflict between rule 15 and token '/' resolved as shift (GT < '/').
    Conflict between rule 15 and token '*' resolved as shift (GT < '*').


State 72

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   16     | expr LE expr .  [ID, EE, NE, LT, GT, LE, GE, ')', ';', ':', ']', ',']
   17     | expr . GE expr

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 16 (expr)

    Conflict between rule 16 and token AND resolved as shift (LE < AND).
    Conflict between rule 16 and token OR resolved as shift (LE < OR).
    Conflict between rule 16 and token XOR resolved as shift (LE < XOR).
    Conflict between rule 16 and token EE resolved as reduce (EE < LE).
    Conflict between rule 16 and token NE resolved as reduce (NE < LE).
    Conflict between rule 16 and token LT resolved as reduce (%left LT).
    Conflict between rule 16 and token GT resolved as reduce (%left GT).
    Conflict between rule 16 and token LE resolved as reduce (%left LE).
    Conflict between rule 16 and token GE resolved as reduce (%left GE).
    Conflict between rule 16 and token '+' resolved as shift (LE < '+').
    Conflict between rule 16 and token '-' resolved as shift (LE < '-').
    Conflict between rule 16 and token '/' resolved as shift (LE < '/').
    Conflict between rule 16 and token '*' resolved as shift (LE < '*').


State 73

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   17     | expr GE expr .  [ID, EE, NE, LT, GT, LE, GE, ')', ';', ':', ']', ',']

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 17 (expr)

    Conflict between rule 17 and token AND resolved as shift (GE < AND).
    Conflict between rule 17 and token OR resolved as shift (GE < OR).
    Conflict between rule 17 and token XOR resolved as shift (GE < XOR).
    Conflict between rule 17 and token EE resolved as reduce (EE < GE).
    Conflict between rule 17 and token NE resolved as reduce (NE < GE).
    Conflict between rule 17 and token LT resolved as reduce (%left LT).
    Conflict between rule 17 and token GT resolved as reduce (%left GT).
    Conflict between rule 17 and token LE resolved as reduce (%left LE).
    Conflict between rule 17 and token GE resolved as reduce (%left GE).
    Conflict between rule 17 and token '+' resolved as shift (GE < '+').
    Conflict between rule 17 and token '-' resolved as shift (GE < '-').
    Conflict between rule 17 and token '/' resolved as shift (GE < '/').
    Conflict between rule 17 and token '*' resolved as shift (GE < '*').


State 74

    4 expr: expr . '+' expr
    4     | expr '+' expr .  [ID, AND, OR, XOR, EE, NE, LT, GT, LE, GE, '+', '-', ')', ';', ':', ']', ',']
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 4 (expr)

    Conflict between rule 4 and token AND resolved as reduce (AND < '+').
    Conflict between rule 4 and token OR resolved as reduce (OR < '+').
    Conflict between rule 4 and token XOR resolved as reduce (XOR < '+').
    Conflict between rule 4 and token EE resolved as reduce (EE < '+').
    Conflict between rule 4 and token NE resolved as reduce (NE < '+').
    Conflict between rule 4 and token LT resolved as reduce (LT < '+').
    Conflict between rule 4 and token GT resolved as reduce (GT < '+').
    Conflict between rule 4 and token LE resolved as reduce (LE < '+').
    Conflict between rule 4 and token GE resolved as reduce (GE < '+').
    Conflict between rule 4 and token '+' resolved as reduce (%left '+').
    Conflict between rule 4 and token '-' resolved as reduce (%left '-').
    Conflict between rule 4 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 4 and token '*' resolved as shift ('+' < '*').


State 75

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    5     | expr '-' expr .  [ID, AND, OR, XOR, EE, NE, LT, GT, LE, GE, '+', '-', ')', ';', ':', ']', ',']
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    '/'  shift, and go to state 56
    '*'  shift, and go to state 57

    $default  reduce using rule 5 (expr)

    Conflict between rule 5 and token AND resolved as reduce (AND < '-').
    Conflict between rule 5 and token OR resolved as reduce (OR < '-').
    Conflict between rule 5 and token XOR resolved as reduce (XOR < '-').
    Conflict between rule 5 and token EE resolved as reduce (EE < '-').
    Conflict between rule 5 and token NE resolved as reduce (NE < '-').
    Conflict between rule 5 and token LT resolved as reduce (LT < '-').
    Conflict between rule 5 and token GT resolved as reduce (GT < '-').
    Conflict between rule 5 and token LE resolved as reduce (LE < '-').
    Conflict between rule 5 and token GE resolved as reduce (GE < '-').
    Conflict between rule 5 and token '+' resolved as reduce (%left '+').
    Conflict between rule 5 and token '-' resolved as reduce (%left '-').
    Conflict between rule 5 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 5 and token '*' resolved as shift ('-' < '*').


State 76

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    6     | expr '/' expr .  [ID, AND, OR, XOR, EE, NE, LT, GT, LE, GE, '+', '-', '/', '*', ')', ';', ':', ']', ',']
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    $default  reduce using rule 6 (expr)

    Conflict between rule 6 and token AND resolved as reduce (AND < '/').
    Conflict between rule 6 and token OR resolved as reduce (OR < '/').
    Conflict between rule 6 and token XOR resolved as reduce (XOR < '/').
    Conflict between rule 6 and token EE resolved as reduce (EE < '/').
    Conflict between rule 6 and token NE resolved as reduce (NE < '/').
    Conflict between rule 6 and token LT resolved as reduce (LT < '/').
    Conflict between rule 6 and token GT resolved as reduce (GT < '/').
    Conflict between rule 6 and token LE resolved as reduce (LE < '/').
    Conflict between rule 6 and token GE resolved as reduce (GE < '/').
    Conflict between rule 6 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 6 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 6 and token '/' resolved as reduce (%left '/').
    Conflict between rule 6 and token '*' resolved as reduce (%left '*').


State 77

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    7     | expr '*' expr .  [ID, AND, OR, XOR, EE, NE, LT, GT, LE, GE, '+', '-', '/', '*', ')', ';', ':', ']', ',']
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr

    $default  reduce using rule 7 (expr)

    Conflict between rule 7 and token AND resolved as reduce (AND < '*').
    Conflict between rule 7 and token OR resolved as reduce (OR < '*').
    Conflict between rule 7 and token XOR resolved as reduce (XOR < '*').
    Conflict between rule 7 and token EE resolved as reduce (EE < '*').
    Conflict between rule 7 and token NE resolved as reduce (NE < '*').
    Conflict between rule 7 and token LT resolved as reduce (LT < '*').
    Conflict between rule 7 and token GT resolved as reduce (GT < '*').
    Conflict between rule 7 and token LE resolved as reduce (LE < '*').
    Conflict between rule 7 and token GE resolved as reduce (GE < '*').
    Conflict between rule 7 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 7 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 7 and token '/' resolved as reduce (%left '/').
    Conflict between rule 7 and token '*' resolved as reduce (%left '*').


State 78

    1 list: . statement list
    2     | . %empty  ['}']
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   32          | IF expr ':' '{' . list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   33          | IF expr ':' '{' . list '}' ELSE '{' list '}'
   34          | . WHILE expr ':' '{' list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 86
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 79

    1 list: . statement list
    2     | . %empty  ['}']
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   34          | . WHILE expr ':' '{' list '}'
   34          | WHILE expr ':' '{' . list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 87
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 80

   25 assi_stmnt: . ID '=' expr
   39 assi_list: . assi_stmnt assi_list
   40          | . ',' assi_list
   40          | ',' . assi_list
   41          | . %empty  [')', ';']

    ID   shift, and go to state 1
    ','  shift, and go to state 80

    $default  reduce using rule 41 (assi_list)

    assi_stmnt  go to state 81
    assi_list   go to state 88


State 81

   25 assi_stmnt: . ID '=' expr
   39 assi_list: . assi_stmnt assi_list
   39          | assi_stmnt . assi_list
   40          | . ',' assi_list
   41          | . %empty  [')', ';']

    ID   shift, and go to state 1
    ','  shift, and go to state 80

    $default  reduce using rule 41 (assi_list)

    assi_stmnt  go to state 81
    assi_list   go to state 89


State 82

   42 decl_list: ID_TYPE assi_list .

    $default  reduce using rule 42 (decl_list)


State 83

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID
   36 statement: FOR '(' decl_list ';' . expr ';' assi_list ')' '{' list '}'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 90


State 84

   35 statement: REPEAT '{' list '}' . UNTILL expr ':'

    UNTILL  shift, and go to state 91


State 85

   37 statement: SWITCH '[' expr ']' . '{' switch_body '}'

    '{'  shift, and go to state 92


State 86

   32 statement: IF expr ':' '{' list . '}'
   33          | IF expr ':' '{' list . '}' ELSE '{' list '}'

    '}'  shift, and go to state 93


State 87

   34 statement: WHILE expr ':' '{' list . '}'

    '}'  shift, and go to state 94


State 88

   40 assi_list: ',' assi_list .

    $default  reduce using rule 40 (assi_list)


State 89

   39 assi_list: assi_stmnt assi_list .

    $default  reduce using rule 39 (assi_list)


State 90

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   36 statement: FOR '(' decl_list ';' expr . ';' assi_list ')' '{' list '}'

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    EE   shift, and go to state 48
    NE   shift, and go to state 49
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57
    ';'  shift, and go to state 95


State 91

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID
   35 statement: REPEAT '{' list '}' UNTILL . expr ':'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 96


State 92

   37 statement: SWITCH '[' expr ']' '{' . switch_body '}'
   43 switch_body: . case_block switch_body
   44            | . %empty  ['}']
   45 case_block: . CASE '[' expr ']' list
   46           | . DEFAULT list

    CASE     shift, and go to state 97
    DEFAULT  shift, and go to state 98

    $default  reduce using rule 44 (switch_body)

    switch_body  go to state 99
    case_block   go to state 100


State 93

   32 statement: IF expr ':' '{' list '}' .  [$end, ID, ID_TYPE, CONST, IF, WHILE, FOR, REPEAT, SWITCH, CASE, DEFAULT, BREAK, ';', '}']
   33          | IF expr ':' '{' list '}' . ELSE '{' list '}'

    ELSE  shift, and go to state 101

    $default  reduce using rule 32 (statement)


State 94

   34 statement: WHILE expr ':' '{' list '}' .

    $default  reduce using rule 34 (statement)


State 95

   25 assi_stmnt: . ID '=' expr
   36 statement: FOR '(' decl_list ';' expr ';' . assi_list ')' '{' list '}'
   39 assi_list: . assi_stmnt assi_list
   40          | . ',' assi_list
   41          | . %empty  [')']

    ID   shift, and go to state 1
    ','  shift, and go to state 80

    $default  reduce using rule 41 (assi_list)

    assi_stmnt  go to state 81
    assi_list   go to state 102


State 96

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   35 statement: REPEAT '{' list '}' UNTILL expr . ':'

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    EE   shift, and go to state 48
    NE   shift, and go to state 49
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57
    ':'  shift, and go to state 103


State 97

   45 case_block: CASE . '[' expr ']' list

    '['  shift, and go to state 104


State 98

    1 list: . statement list
    2     | . %empty  [CASE, DEFAULT, '}']
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   34          | . WHILE expr ':' '{' list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'
   46 case_block: DEFAULT . list

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 105
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 99

   37 statement: SWITCH '[' expr ']' '{' switch_body . '}'

    '}'  shift, and go to state 106


State 100

   43 switch_body: . case_block switch_body
   43            | case_block . switch_body
   44            | . %empty  ['}']
   45 case_block: . CASE '[' expr ']' list
   46           | . DEFAULT list

    CASE     shift, and go to state 97
    DEFAULT  shift, and go to state 98

    $default  reduce using rule 44 (switch_body)

    switch_body  go to state 107
    case_block   go to state 100


State 101

   33 statement: IF expr ':' '{' list '}' ELSE . '{' list '}'

    '{'  shift, and go to state 108


State 102

   36 statement: FOR '(' decl_list ';' expr ';' assi_list . ')' '{' list '}'

    ')'  shift, and go to state 109


State 103

   35 statement: REPEAT '{' list '}' UNTILL expr ':' .

    $default  reduce using rule 35 (statement)


State 104

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr EE expr
   13     | . expr NE expr
   14     | . expr LT expr
   15     | . expr GT expr
   16     | . expr LE expr
   17     | . expr GE expr
   18     | . '!' expr
   19     | . BOOL_VAL
   20     | . INT_VAL
   21     | . DOUBLE_VAL
   22     | . STRING_VAL
   23     | . CHAR_VAL
   24     | . ID
   45 case_block: CASE '[' . expr ']' list

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    CHAR_VAL    shift, and go to state 25
    '-'         shift, and go to state 26
    '!'         shift, and go to state 27
    '('         shift, and go to state 28

    expr  go to state 110


State 105

   46 case_block: DEFAULT list .

    $default  reduce using rule 46 (case_block)


State 106

   37 statement: SWITCH '[' expr ']' '{' switch_body '}' .

    $default  reduce using rule 37 (statement)


State 107

   43 switch_body: case_block switch_body .

    $default  reduce using rule 43 (switch_body)


State 108

    1 list: . statement list
    2     | . %empty  ['}']
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   33          | IF expr ':' '{' list '}' ELSE '{' . list '}'
   34          | . WHILE expr ':' '{' list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 111
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 109

   36 statement: FOR '(' decl_list ';' expr ';' assi_list ')' . '{' list '}'

    '{'  shift, and go to state 112


State 110

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . EE expr
   13     | expr . NE expr
   14     | expr . LT expr
   15     | expr . GT expr
   16     | expr . LE expr
   17     | expr . GE expr
   45 case_block: CASE '[' expr . ']' list

    AND  shift, and go to state 45
    OR   shift, and go to state 46
    XOR  shift, and go to state 47
    EE   shift, and go to state 48
    NE   shift, and go to state 49
    LT   shift, and go to state 50
    GT   shift, and go to state 51
    LE   shift, and go to state 52
    GE   shift, and go to state 53
    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '/'  shift, and go to state 56
    '*'  shift, and go to state 57
    ']'  shift, and go to state 113


State 111

   33 statement: IF expr ':' '{' list '}' ELSE '{' list . '}'

    '}'  shift, and go to state 114


State 112

    1 list: . statement list
    2     | . %empty  ['}']
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   34          | . WHILE expr ':' '{' list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   36          | FOR '(' decl_list ';' expr ';' assi_list ')' '{' . list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 115
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 113

    1 list: . statement list
    2     | . %empty  [CASE, DEFAULT, '}']
   25 assi_stmnt: . ID '=' expr
   26 decl_stmnt: . ID_TYPE assi_stmnt
   27 statement: . ';'
   28          | . assi_stmnt ';'
   29          | . decl_stmnt ';'
   30          | . CONST decl_stmnt ';'
   31          | . ID_TYPE ID ';'
   32          | . IF expr ':' '{' list '}'
   33          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   34          | . WHILE expr ':' '{' list '}'
   35          | . REPEAT '{' list '}' UNTILL expr ':'
   36          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   37          | . SWITCH '[' expr ']' '{' switch_body '}'
   38          | . BREAK ';'
   45 case_block: CASE '[' expr ']' . list

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 116
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 114

   33 statement: IF expr ':' '{' list '}' ELSE '{' list '}' .

    $default  reduce using rule 33 (statement)


State 115

   36 statement: FOR '(' decl_list ';' expr ';' assi_list ')' '{' list . '}'

    '}'  shift, and go to state 117


State 116

   45 case_block: CASE '[' expr ']' list .

    $default  reduce using rule 45 (case_block)


State 117

   36 statement: FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}' .

    $default  reduce using rule 36 (statement)
