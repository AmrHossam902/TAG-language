Terminals unused in grammar

   CMP
   UM
   STMNT1
   ASSI_LIST
   DECL_LIST
   SWBODY
   LIST
   NOT
   "="


Grammar

    0 $accept: list $end

    1 list: statement list
    2     | %empty

    3 expr: '(' expr ')'
    4     | expr '+' expr
    5     | expr '-' expr
    6     | expr '/' expr
    7     | expr '*' expr
    8     | '-' expr
    9     | expr AND expr
   10     | expr OR expr
   11     | expr XOR expr
   12     | expr CMP1 expr
   13     | expr CMP2 expr
   14     | '!' expr
   15     | BOOL_VAL
   16     | INT_VAL
   17     | DOUBLE_VAL
   18     | STRING_VAL
   19     | ID

   20 assi_stmnt: ID '=' expr

   21 decl_stmnt: ID_TYPE assi_stmnt

   22 statement: ';'
   23          | assi_stmnt ';'
   24          | decl_stmnt ';'
   25          | CONST decl_stmnt ';'
   26          | ID_TYPE ID ';'
   27          | IF expr ':' '{' list '}'
   28          | IF expr ':' '{' list '}' ELSE '{' list '}'
   29          | WHILE expr ':' '{' list '}'
   30          | REPEAT '{' list '}' UNTILL expr ':'
   31          | FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | SWITCH '[' expr ']' '{' switch_body '}'
   33          | BREAK ';'

   34 assi_list: assi_stmnt assi_list
   35          | ',' assi_list
   36          | %empty

   37 decl_list: ID_TYPE assi_list

   38 switch_body: case_block switch_body
   39            | %empty

   40 case_block: CASE '[' expr ']' list
   41           | DEFAULT list


Terminals, with rules where they appear

$end (0) 0
'!' (33) 14
'(' (40) 3 31
')' (41) 3 31
'*' (42) 7
'+' (43) 4
',' (44) 35
'-' (45) 5 8
'/' (47) 6
':' (58) 27 28 29 30
';' (59) 22 23 24 25 26 31 33
'=' (61) 20
'[' (91) 32 40
']' (93) 32 40
'{' (123) 27 28 29 30 31 32
'}' (125) 27 28 29 30 31 32
error (256)
INT_VAL (258) 16
DOUBLE_VAL (259) 17
BOOL_VAL (260) 15
ID (261) 19 20 26
ID_TYPE (262) 21 26 37
STRING_VAL (263) 18
CONST (264) 25
IF (265) 27 28
ELSE (266) 28
WHILE (267) 29
FOR (268) 31
REPEAT (269) 30
UNTILL (270) 30
SWITCH (271) 32
CASE (272) 40
DEFAULT (273) 41
BREAK (274) 33
AND (275) 9
OR (276) 10
XOR (277) 11
CMP (278)
UM (279)
STMNT1 (280)
ASSI_LIST (281)
DECL_LIST (282)
SWBODY (283)
LIST (284)
NOT (285)
CMP2 (286) 13
CMP1 (287) 12
UMINUS (288)
"=" (289)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
list (51)
    on left: 1 2, on right: 0 1 27 28 29 30 31 40 41
expr (52)
    on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19, on right:
    3 4 5 6 7 8 9 10 11 12 13 14 20 27 28 29 30 31 32 40
assi_stmnt (53)
    on left: 20, on right: 21 23 34
decl_stmnt (54)
    on left: 21, on right: 24 25
statement (55)
    on left: 22 23 24 25 26 27 28 29 30 31 32 33, on right: 1
assi_list (56)
    on left: 34 35 36, on right: 31 34 35 37
decl_list (57)
    on left: 37, on right: 31
switch_body (58)
    on left: 38 39, on right: 32 38
case_block (59)
    on left: 40 41, on right: 38


State 0

    0 $accept: . list $end
    1 list: . statement list
    2     | . %empty  [$end]
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   29          | . WHILE expr ':' '{' list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 11
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 1

   20 assi_stmnt: ID . '=' expr

    '='  shift, and go to state 15


State 2

   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: ID_TYPE . assi_stmnt
   26 statement: ID_TYPE . ID ';'

    ID  shift, and go to state 16

    assi_stmnt  go to state 17


State 3

   21 decl_stmnt: . ID_TYPE assi_stmnt
   25 statement: CONST . decl_stmnt ';'

    ID_TYPE  shift, and go to state 18

    decl_stmnt  go to state 19


State 4

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID
   27 statement: IF . expr ':' '{' list '}'
   28          | IF . expr ':' '{' list '}' ELSE '{' list '}'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 28


State 5

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID
   29 statement: WHILE . expr ':' '{' list '}'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 29


State 6

   31 statement: FOR . '(' decl_list ';' expr ';' assi_list ')' '{' list '}'

    '('  shift, and go to state 30


State 7

   30 statement: REPEAT . '{' list '}' UNTILL expr ':'

    '{'  shift, and go to state 31


State 8

   32 statement: SWITCH . '[' expr ']' '{' switch_body '}'

    '['  shift, and go to state 32


State 9

   33 statement: BREAK . ';'

    ';'  shift, and go to state 33


State 10

   22 statement: ';' .

    $default  reduce using rule 22 (statement)


State 11

    0 $accept: list . $end

    $end  shift, and go to state 34


State 12

   23 statement: assi_stmnt . ';'

    ';'  shift, and go to state 35


State 13

   24 statement: decl_stmnt . ';'

    ';'  shift, and go to state 36


State 14

    1 list: . statement list
    1     | statement . list
    2     | . %empty  [$end, CASE, DEFAULT, '}']
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   29          | . WHILE expr ':' '{' list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 37
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 15

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID
   20 assi_stmnt: ID '=' . expr

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 38


State 16

   20 assi_stmnt: ID . '=' expr
   26 statement: ID_TYPE ID . ';'

    '='  shift, and go to state 15
    ';'  shift, and go to state 39


State 17

   21 decl_stmnt: ID_TYPE assi_stmnt .

    $default  reduce using rule 21 (decl_stmnt)


State 18

   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: ID_TYPE . assi_stmnt

    ID  shift, and go to state 1

    assi_stmnt  go to state 17


State 19

   25 statement: CONST decl_stmnt . ';'

    ';'  shift, and go to state 40


State 20

   16 expr: INT_VAL .

    $default  reduce using rule 16 (expr)


State 21

   17 expr: DOUBLE_VAL .

    $default  reduce using rule 17 (expr)


State 22

   15 expr: BOOL_VAL .

    $default  reduce using rule 15 (expr)


State 23

   19 expr: ID .

    $default  reduce using rule 19 (expr)


State 24

   18 expr: STRING_VAL .

    $default  reduce using rule 18 (expr)


State 25

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    8     | '-' . expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 41


State 26

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   14     | '!' . expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 42


State 27

    3 expr: . '(' expr ')'
    3     | '(' . expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 43


State 28

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   27 statement: IF expr . ':' '{' list '}'
   28          | IF expr . ':' '{' list '}' ELSE '{' list '}'

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP2  shift, and go to state 47
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52
    ':'   shift, and go to state 53


State 29

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   29 statement: WHILE expr . ':' '{' list '}'

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP2  shift, and go to state 47
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52
    ':'   shift, and go to state 54


State 30

   31 statement: FOR '(' . decl_list ';' expr ';' assi_list ')' '{' list '}'
   37 decl_list: . ID_TYPE assi_list

    ID_TYPE  shift, and go to state 55

    decl_list  go to state 56


State 31

    1 list: . statement list
    2     | . %empty  ['}']
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   29          | . WHILE expr ':' '{' list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   30          | REPEAT '{' . list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 57
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 32

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID
   32 statement: SWITCH '[' . expr ']' '{' switch_body '}'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 58


State 33

   33 statement: BREAK ';' .

    $default  reduce using rule 33 (statement)


State 34

    0 $accept: list $end .

    $default  accept


State 35

   23 statement: assi_stmnt ';' .

    $default  reduce using rule 23 (statement)


State 36

   24 statement: decl_stmnt ';' .

    $default  reduce using rule 24 (statement)


State 37

    1 list: statement list .

    $default  reduce using rule 1 (list)


State 38

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   20 assi_stmnt: ID '=' expr .  [ID, ')', ';', ',']

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP2  shift, and go to state 47
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52

    $default  reduce using rule 20 (assi_stmnt)


State 39

   26 statement: ID_TYPE ID ';' .

    $default  reduce using rule 26 (statement)


State 40

   25 statement: CONST decl_stmnt ';' .

    $default  reduce using rule 25 (statement)


State 41

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    8     | '-' expr .  [ID, AND, OR, XOR, CMP2, CMP1, '+', '-', '/', '*', ')', ';', ':', ']', ',']
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    $default  reduce using rule 8 (expr)

    Conflict between rule 8 and token AND resolved as reduce (AND < UMINUS).
    Conflict between rule 8 and token OR resolved as reduce (OR < UMINUS).
    Conflict between rule 8 and token XOR resolved as reduce (XOR < UMINUS).
    Conflict between rule 8 and token CMP2 resolved as reduce (CMP2 < UMINUS).
    Conflict between rule 8 and token CMP1 resolved as reduce (CMP1 < UMINUS).
    Conflict between rule 8 and token '+' resolved as reduce ('+' < UMINUS).
    Conflict between rule 8 and token '-' resolved as reduce ('-' < UMINUS).
    Conflict between rule 8 and token '/' resolved as reduce ('/' < UMINUS).
    Conflict between rule 8 and token '*' resolved as reduce ('*' < UMINUS).


State 42

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   14     | '!' expr .  [ID, AND, OR, XOR, CMP2, CMP1, '+', '-', '/', '*', ')', ';', ':', ']', ',']

    $default  reduce using rule 14 (expr)

    Conflict between rule 14 and token AND resolved as reduce (AND < UMINUS).
    Conflict between rule 14 and token OR resolved as reduce (OR < UMINUS).
    Conflict between rule 14 and token XOR resolved as reduce (XOR < UMINUS).
    Conflict between rule 14 and token CMP2 resolved as reduce (CMP2 < UMINUS).
    Conflict between rule 14 and token CMP1 resolved as reduce (CMP1 < UMINUS).
    Conflict between rule 14 and token '+' resolved as reduce ('+' < UMINUS).
    Conflict between rule 14 and token '-' resolved as reduce ('-' < UMINUS).
    Conflict between rule 14 and token '/' resolved as reduce ('/' < UMINUS).
    Conflict between rule 14 and token '*' resolved as reduce ('*' < UMINUS).


State 43

    3 expr: '(' expr . ')'
    4     | expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP2  shift, and go to state 47
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52
    ')'   shift, and go to state 59


State 44

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
    9     | expr AND . expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 60


State 45

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   10     | expr OR . expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 61


State 46

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   11     | expr XOR . expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 62


State 47

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   13     | expr CMP2 . expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 63


State 48

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   12     | expr CMP1 . expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 64


State 49

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    4     | expr '+' . expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 65


State 50

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    5     | expr '-' . expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 66


State 51

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    6     | expr '/' . expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 67


State 52

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    7     | expr '*' . expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 68


State 53

   27 statement: IF expr ':' . '{' list '}'
   28          | IF expr ':' . '{' list '}' ELSE '{' list '}'

    '{'  shift, and go to state 69


State 54

   29 statement: WHILE expr ':' . '{' list '}'

    '{'  shift, and go to state 70


State 55

   20 assi_stmnt: . ID '=' expr
   34 assi_list: . assi_stmnt assi_list
   35          | . ',' assi_list
   36          | . %empty  [';']
   37 decl_list: ID_TYPE . assi_list

    ID   shift, and go to state 1
    ','  shift, and go to state 71

    $default  reduce using rule 36 (assi_list)

    assi_stmnt  go to state 72
    assi_list   go to state 73


State 56

   31 statement: FOR '(' decl_list . ';' expr ';' assi_list ')' '{' list '}'

    ';'  shift, and go to state 74


State 57

   30 statement: REPEAT '{' list . '}' UNTILL expr ':'

    '}'  shift, and go to state 75


State 58

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   32 statement: SWITCH '[' expr . ']' '{' switch_body '}'

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP2  shift, and go to state 47
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52
    ']'   shift, and go to state 76


State 59

    3 expr: '(' expr ')' .

    $default  reduce using rule 3 (expr)


State 60

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
    9     | expr AND expr .  [ID, AND, OR, CMP2, CMP1, ')', ';', ':', ']', ',']
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    XOR  shift, and go to state 46
    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '/'  shift, and go to state 51
    '*'  shift, and go to state 52

    $default  reduce using rule 9 (expr)

    Conflict between rule 9 and token AND resolved as reduce (%left AND).
    Conflict between rule 9 and token OR resolved as reduce (OR < AND).
    Conflict between rule 9 and token XOR resolved as shift (AND < XOR).
    Conflict between rule 9 and token CMP2 resolved as reduce (CMP2 < AND).
    Conflict between rule 9 and token CMP1 resolved as reduce (CMP1 < AND).
    Conflict between rule 9 and token '+' resolved as shift (AND < '+').
    Conflict between rule 9 and token '-' resolved as shift (AND < '-').
    Conflict between rule 9 and token '/' resolved as shift (AND < '/').
    Conflict between rule 9 and token '*' resolved as shift (AND < '*').


State 61

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   10     | expr OR expr .  [ID, OR, CMP2, CMP1, ')', ';', ':', ']', ',']
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    AND  shift, and go to state 44
    XOR  shift, and go to state 46
    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '/'  shift, and go to state 51
    '*'  shift, and go to state 52

    $default  reduce using rule 10 (expr)

    Conflict between rule 10 and token AND resolved as shift (OR < AND).
    Conflict between rule 10 and token OR resolved as reduce (%left OR).
    Conflict between rule 10 and token XOR resolved as shift (OR < XOR).
    Conflict between rule 10 and token CMP2 resolved as reduce (CMP2 < OR).
    Conflict between rule 10 and token CMP1 resolved as reduce (CMP1 < OR).
    Conflict between rule 10 and token '+' resolved as shift (OR < '+').
    Conflict between rule 10 and token '-' resolved as shift (OR < '-').
    Conflict between rule 10 and token '/' resolved as shift (OR < '/').
    Conflict between rule 10 and token '*' resolved as shift (OR < '*').


State 62

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   11     | expr XOR expr .  [ID, AND, OR, XOR, CMP2, CMP1, ')', ';', ':', ']', ',']
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '/'  shift, and go to state 51
    '*'  shift, and go to state 52

    $default  reduce using rule 11 (expr)

    Conflict between rule 11 and token AND resolved as reduce (AND < XOR).
    Conflict between rule 11 and token OR resolved as reduce (OR < XOR).
    Conflict between rule 11 and token XOR resolved as reduce (%left XOR).
    Conflict between rule 11 and token CMP2 resolved as reduce (CMP2 < XOR).
    Conflict between rule 11 and token CMP1 resolved as reduce (CMP1 < XOR).
    Conflict between rule 11 and token '+' resolved as shift (XOR < '+').
    Conflict between rule 11 and token '-' resolved as shift (XOR < '-').
    Conflict between rule 11 and token '/' resolved as shift (XOR < '/').
    Conflict between rule 11 and token '*' resolved as shift (XOR < '*').


State 63

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   13     | expr CMP2 expr .  [ID, CMP2, ')', ';', ':', ']', ',']

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52

    $default  reduce using rule 13 (expr)

    Conflict between rule 13 and token AND resolved as shift (CMP2 < AND).
    Conflict between rule 13 and token OR resolved as shift (CMP2 < OR).
    Conflict between rule 13 and token XOR resolved as shift (CMP2 < XOR).
    Conflict between rule 13 and token CMP2 resolved as reduce (%left CMP2).
    Conflict between rule 13 and token CMP1 resolved as shift (CMP2 < CMP1).
    Conflict between rule 13 and token '+' resolved as shift (CMP2 < '+').
    Conflict between rule 13 and token '-' resolved as shift (CMP2 < '-').
    Conflict between rule 13 and token '/' resolved as shift (CMP2 < '/').
    Conflict between rule 13 and token '*' resolved as shift (CMP2 < '*').


State 64

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   12     | expr CMP1 expr .  [ID, CMP2, CMP1, ')', ';', ':', ']', ',']
   13     | expr . CMP2 expr

    AND  shift, and go to state 44
    OR   shift, and go to state 45
    XOR  shift, and go to state 46
    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '/'  shift, and go to state 51
    '*'  shift, and go to state 52

    $default  reduce using rule 12 (expr)

    Conflict between rule 12 and token AND resolved as shift (CMP1 < AND).
    Conflict between rule 12 and token OR resolved as shift (CMP1 < OR).
    Conflict between rule 12 and token XOR resolved as shift (CMP1 < XOR).
    Conflict between rule 12 and token CMP2 resolved as reduce (CMP2 < CMP1).
    Conflict between rule 12 and token CMP1 resolved as reduce (%left CMP1).
    Conflict between rule 12 and token '+' resolved as shift (CMP1 < '+').
    Conflict between rule 12 and token '-' resolved as shift (CMP1 < '-').
    Conflict between rule 12 and token '/' resolved as shift (CMP1 < '/').
    Conflict between rule 12 and token '*' resolved as shift (CMP1 < '*').


State 65

    4 expr: expr . '+' expr
    4     | expr '+' expr .  [ID, AND, OR, XOR, CMP2, CMP1, '+', '-', ')', ';', ':', ']', ',']
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    '/'  shift, and go to state 51
    '*'  shift, and go to state 52

    $default  reduce using rule 4 (expr)

    Conflict between rule 4 and token AND resolved as reduce (AND < '+').
    Conflict between rule 4 and token OR resolved as reduce (OR < '+').
    Conflict between rule 4 and token XOR resolved as reduce (XOR < '+').
    Conflict between rule 4 and token CMP2 resolved as reduce (CMP2 < '+').
    Conflict between rule 4 and token CMP1 resolved as reduce (CMP1 < '+').
    Conflict between rule 4 and token '+' resolved as reduce (%left '+').
    Conflict between rule 4 and token '-' resolved as reduce (%left '-').
    Conflict between rule 4 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 4 and token '*' resolved as shift ('+' < '*').


State 66

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    5     | expr '-' expr .  [ID, AND, OR, XOR, CMP2, CMP1, '+', '-', ')', ';', ':', ']', ',']
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    '/'  shift, and go to state 51
    '*'  shift, and go to state 52

    $default  reduce using rule 5 (expr)

    Conflict between rule 5 and token AND resolved as reduce (AND < '-').
    Conflict between rule 5 and token OR resolved as reduce (OR < '-').
    Conflict between rule 5 and token XOR resolved as reduce (XOR < '-').
    Conflict between rule 5 and token CMP2 resolved as reduce (CMP2 < '-').
    Conflict between rule 5 and token CMP1 resolved as reduce (CMP1 < '-').
    Conflict between rule 5 and token '+' resolved as reduce (%left '+').
    Conflict between rule 5 and token '-' resolved as reduce (%left '-').
    Conflict between rule 5 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 5 and token '*' resolved as shift ('-' < '*').


State 67

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    6     | expr '/' expr .  [ID, AND, OR, XOR, CMP2, CMP1, '+', '-', '/', '*', ')', ';', ':', ']', ',']
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    $default  reduce using rule 6 (expr)

    Conflict between rule 6 and token AND resolved as reduce (AND < '/').
    Conflict between rule 6 and token OR resolved as reduce (OR < '/').
    Conflict between rule 6 and token XOR resolved as reduce (XOR < '/').
    Conflict between rule 6 and token CMP2 resolved as reduce (CMP2 < '/').
    Conflict between rule 6 and token CMP1 resolved as reduce (CMP1 < '/').
    Conflict between rule 6 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 6 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 6 and token '/' resolved as reduce (%left '/').
    Conflict between rule 6 and token '*' resolved as reduce (%left '*').


State 68

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    7     | expr '*' expr .  [ID, AND, OR, XOR, CMP2, CMP1, '+', '-', '/', '*', ')', ';', ':', ']', ',']
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr

    $default  reduce using rule 7 (expr)

    Conflict between rule 7 and token AND resolved as reduce (AND < '*').
    Conflict between rule 7 and token OR resolved as reduce (OR < '*').
    Conflict between rule 7 and token XOR resolved as reduce (XOR < '*').
    Conflict between rule 7 and token CMP2 resolved as reduce (CMP2 < '*').
    Conflict between rule 7 and token CMP1 resolved as reduce (CMP1 < '*').
    Conflict between rule 7 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 7 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 7 and token '/' resolved as reduce (%left '/').
    Conflict between rule 7 and token '*' resolved as reduce (%left '*').


State 69

    1 list: . statement list
    2     | . %empty  ['}']
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   27          | IF expr ':' '{' . list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   28          | IF expr ':' '{' . list '}' ELSE '{' list '}'
   29          | . WHILE expr ':' '{' list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 77
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 70

    1 list: . statement list
    2     | . %empty  ['}']
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   29          | . WHILE expr ':' '{' list '}'
   29          | WHILE expr ':' '{' . list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 78
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 71

   20 assi_stmnt: . ID '=' expr
   34 assi_list: . assi_stmnt assi_list
   35          | . ',' assi_list
   35          | ',' . assi_list
   36          | . %empty  [')', ';']

    ID   shift, and go to state 1
    ','  shift, and go to state 71

    $default  reduce using rule 36 (assi_list)

    assi_stmnt  go to state 72
    assi_list   go to state 79


State 72

   20 assi_stmnt: . ID '=' expr
   34 assi_list: . assi_stmnt assi_list
   34          | assi_stmnt . assi_list
   35          | . ',' assi_list
   36          | . %empty  [')', ';']

    ID   shift, and go to state 1
    ','  shift, and go to state 71

    $default  reduce using rule 36 (assi_list)

    assi_stmnt  go to state 72
    assi_list   go to state 80


State 73

   37 decl_list: ID_TYPE assi_list .

    $default  reduce using rule 37 (decl_list)


State 74

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID
   31 statement: FOR '(' decl_list ';' . expr ';' assi_list ')' '{' list '}'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 81


State 75

   30 statement: REPEAT '{' list '}' . UNTILL expr ':'

    UNTILL  shift, and go to state 82


State 76

   32 statement: SWITCH '[' expr ']' . '{' switch_body '}'

    '{'  shift, and go to state 83


State 77

   27 statement: IF expr ':' '{' list . '}'
   28          | IF expr ':' '{' list . '}' ELSE '{' list '}'

    '}'  shift, and go to state 84


State 78

   29 statement: WHILE expr ':' '{' list . '}'

    '}'  shift, and go to state 85


State 79

   35 assi_list: ',' assi_list .

    $default  reduce using rule 35 (assi_list)


State 80

   34 assi_list: assi_stmnt assi_list .

    $default  reduce using rule 34 (assi_list)


State 81

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   31 statement: FOR '(' decl_list ';' expr . ';' assi_list ')' '{' list '}'

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP2  shift, and go to state 47
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52
    ';'   shift, and go to state 86


State 82

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID
   30 statement: REPEAT '{' list '}' UNTILL . expr ':'

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 87


State 83

   32 statement: SWITCH '[' expr ']' '{' . switch_body '}'
   38 switch_body: . case_block switch_body
   39            | . %empty  ['}']
   40 case_block: . CASE '[' expr ']' list
   41           | . DEFAULT list

    CASE     shift, and go to state 88
    DEFAULT  shift, and go to state 89

    $default  reduce using rule 39 (switch_body)

    switch_body  go to state 90
    case_block   go to state 91


State 84

   27 statement: IF expr ':' '{' list '}' .  [$end, ID, ID_TYPE, CONST, IF, WHILE, FOR, REPEAT, SWITCH, CASE, DEFAULT, BREAK, ';', '}']
   28          | IF expr ':' '{' list '}' . ELSE '{' list '}'

    ELSE  shift, and go to state 92

    $default  reduce using rule 27 (statement)


State 85

   29 statement: WHILE expr ':' '{' list '}' .

    $default  reduce using rule 29 (statement)


State 86

   20 assi_stmnt: . ID '=' expr
   31 statement: FOR '(' decl_list ';' expr ';' . assi_list ')' '{' list '}'
   34 assi_list: . assi_stmnt assi_list
   35          | . ',' assi_list
   36          | . %empty  [')']

    ID   shift, and go to state 1
    ','  shift, and go to state 71

    $default  reduce using rule 36 (assi_list)

    assi_stmnt  go to state 72
    assi_list   go to state 93


State 87

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   30 statement: REPEAT '{' list '}' UNTILL expr . ':'

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP2  shift, and go to state 47
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52
    ':'   shift, and go to state 94


State 88

   40 case_block: CASE . '[' expr ']' list

    '['  shift, and go to state 95


State 89

    1 list: . statement list
    2     | . %empty  [CASE, DEFAULT, '}']
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   29          | . WHILE expr ':' '{' list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'
   41 case_block: DEFAULT . list

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 96
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 90

   32 statement: SWITCH '[' expr ']' '{' switch_body . '}'

    '}'  shift, and go to state 97


State 91

   38 switch_body: . case_block switch_body
   38            | case_block . switch_body
   39            | . %empty  ['}']
   40 case_block: . CASE '[' expr ']' list
   41           | . DEFAULT list

    CASE     shift, and go to state 88
    DEFAULT  shift, and go to state 89

    $default  reduce using rule 39 (switch_body)

    switch_body  go to state 98
    case_block   go to state 91


State 92

   28 statement: IF expr ':' '{' list '}' ELSE . '{' list '}'

    '{'  shift, and go to state 99


State 93

   31 statement: FOR '(' decl_list ';' expr ';' assi_list . ')' '{' list '}'

    ')'  shift, and go to state 100


State 94

   30 statement: REPEAT '{' list '}' UNTILL expr ':' .

    $default  reduce using rule 30 (statement)


State 95

    3 expr: . '(' expr ')'
    4     | . expr '+' expr
    5     | . expr '-' expr
    6     | . expr '/' expr
    7     | . expr '*' expr
    8     | . '-' expr
    9     | . expr AND expr
   10     | . expr OR expr
   11     | . expr XOR expr
   12     | . expr CMP1 expr
   13     | . expr CMP2 expr
   14     | . '!' expr
   15     | . BOOL_VAL
   16     | . INT_VAL
   17     | . DOUBLE_VAL
   18     | . STRING_VAL
   19     | . ID
   40 case_block: CASE '[' . expr ']' list

    INT_VAL     shift, and go to state 20
    DOUBLE_VAL  shift, and go to state 21
    BOOL_VAL    shift, and go to state 22
    ID          shift, and go to state 23
    STRING_VAL  shift, and go to state 24
    '-'         shift, and go to state 25
    '!'         shift, and go to state 26
    '('         shift, and go to state 27

    expr  go to state 101


State 96

   41 case_block: DEFAULT list .

    $default  reduce using rule 41 (case_block)


State 97

   32 statement: SWITCH '[' expr ']' '{' switch_body '}' .

    $default  reduce using rule 32 (statement)


State 98

   38 switch_body: case_block switch_body .

    $default  reduce using rule 38 (switch_body)


State 99

    1 list: . statement list
    2     | . %empty  ['}']
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   28          | IF expr ':' '{' list '}' ELSE '{' . list '}'
   29          | . WHILE expr ':' '{' list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 102
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 100

   31 statement: FOR '(' decl_list ';' expr ';' assi_list ')' . '{' list '}'

    '{'  shift, and go to state 103


State 101

    4 expr: expr . '+' expr
    5     | expr . '-' expr
    6     | expr . '/' expr
    7     | expr . '*' expr
    9     | expr . AND expr
   10     | expr . OR expr
   11     | expr . XOR expr
   12     | expr . CMP1 expr
   13     | expr . CMP2 expr
   40 case_block: CASE '[' expr . ']' list

    AND   shift, and go to state 44
    OR    shift, and go to state 45
    XOR   shift, and go to state 46
    CMP2  shift, and go to state 47
    CMP1  shift, and go to state 48
    '+'   shift, and go to state 49
    '-'   shift, and go to state 50
    '/'   shift, and go to state 51
    '*'   shift, and go to state 52
    ']'   shift, and go to state 104


State 102

   28 statement: IF expr ':' '{' list '}' ELSE '{' list . '}'

    '}'  shift, and go to state 105


State 103

    1 list: . statement list
    2     | . %empty  ['}']
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   29          | . WHILE expr ':' '{' list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   31          | FOR '(' decl_list ';' expr ';' assi_list ')' '{' . list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 106
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 104

    1 list: . statement list
    2     | . %empty  [CASE, DEFAULT, '}']
   20 assi_stmnt: . ID '=' expr
   21 decl_stmnt: . ID_TYPE assi_stmnt
   22 statement: . ';'
   23          | . assi_stmnt ';'
   24          | . decl_stmnt ';'
   25          | . CONST decl_stmnt ';'
   26          | . ID_TYPE ID ';'
   27          | . IF expr ':' '{' list '}'
   28          | . IF expr ':' '{' list '}' ELSE '{' list '}'
   29          | . WHILE expr ':' '{' list '}'
   30          | . REPEAT '{' list '}' UNTILL expr ':'
   31          | . FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}'
   32          | . SWITCH '[' expr ']' '{' switch_body '}'
   33          | . BREAK ';'
   40 case_block: CASE '[' expr ']' . list

    ID       shift, and go to state 1
    ID_TYPE  shift, and go to state 2
    CONST    shift, and go to state 3
    IF       shift, and go to state 4
    WHILE    shift, and go to state 5
    FOR      shift, and go to state 6
    REPEAT   shift, and go to state 7
    SWITCH   shift, and go to state 8
    BREAK    shift, and go to state 9
    ';'      shift, and go to state 10

    $default  reduce using rule 2 (list)

    list        go to state 107
    assi_stmnt  go to state 12
    decl_stmnt  go to state 13
    statement   go to state 14


State 105

   28 statement: IF expr ':' '{' list '}' ELSE '{' list '}' .

    $default  reduce using rule 28 (statement)


State 106

   31 statement: FOR '(' decl_list ';' expr ';' assi_list ')' '{' list . '}'

    '}'  shift, and go to state 108


State 107

   40 case_block: CASE '[' expr ']' list .

    $default  reduce using rule 40 (case_block)


State 108

   31 statement: FOR '(' decl_list ';' expr ';' assi_list ')' '{' list '}' .

    $default  reduce using rule 31 (statement)
